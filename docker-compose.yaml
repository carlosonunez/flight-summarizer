volumes:
  gomod: {}
  gocache: {}
  tzdb-vol: {}
  tsdata-vol: {}
  gpgdata-vol: {}
services:
  # This starts an instance of Flight Summarizer using the same
  # Docker image that's deployed by the 'deploy-to-ghcr' service
  # in this manifest.
  summarizer-server:
    build:
      context: .
    environment:
      - SERVER_HOST
      - SERVER_PORT
    ports:
      - ${SERVER_PORT:-8080}:${SERVER_PORT:-8080}
    command:
      - serve
  # Builds Flight Summarizer binaries.
  build:
    image: golang:${GOLANG_VERSION}-alpine
    volumes:
      - gomod:/go/pkg/mod
      - gocache:/root/.cache/go-build
      - $PWD/out:/out
      - $PWD:/usr/local/go/src/project
    working_dir: /usr/local/go/src/project
    entrypoint: [ "sh" ]
    environment:
      - CGO_ENABLED=0
      - GOOS=${GOOS:-linux}
      - GOARCH=${GOARCH:-arm64}
      - PROJECT_NAME
    command:
      - -c
      - |
        go build -o "/out/${PROJECT_NAME}-$${GOOS}-$${GOARCH}" ./cmd/${PROJECT_NAME}/main.go
  # Runs unit tests against Flight Summarizer.
  test:
    image: golang:${GOLANG_VERSION}-alpine
    platform: "linux/$GOARCH"
    volumes:
      - gomod:/go/pkg/mod
      - gocache:/root/.cache/go-build
      - $PWD:/usr/local/go/src/project
    working_dir: /usr/local/go/src/project
    entrypoint: [ "go" ]
    environment:
      - TEST_EXCLUDE
      - TEST_FILTER
      - CGO_ENABLED=0
      - GOOS=${GOOS:-linux}
      - GOARCH=${GOARCH:-arm64}
    command:
      - test
      - -failfast
      - ./...
      - -skip
      - ${TEST_EXCLUDE:-E2E}
      - -run
      - ${TEST_FILTER:-.*}
  # Runs end-to-end tests against real flight data
  # providers.
  #
  # NOTE: You might be rate-limited by these
  # providers if you run these too often. Exercise caution,
  # and rely on unit tests as much as you can before running
  # this service.
  e2e:
    depends_on:
      tailscale:
        condition: service_started
      retrieve_timezones:
        condition: service_completed_successfully
    image: golang:${GOLANG_VERSION}-alpine
    platform: "linux/$GOARCH"
    network_mode: service:tailscale
    volumes:
      - gomod:/go/pkg/mod
      - gocache:/root/.cache/go-build
      - tzdb-vol:/data
      - $PWD:/usr/local/go/src/project
    working_dir: /usr/local/go/src/project
    entrypoint: [ "go" ]
    environment:
      - TEST_EXCLUDE
      - TEST_FILTER
      - CGO_ENABLED=0
      - GOOS=${GOOS:-linux}
      - GOARCH=${GOARCH:-arm64}
    command:
      - test
      - -failfast
      - ./...
      - -run
      - E2E
  # Deploys Flight Summarizer to GitHub Container Registry.
  #
  # Run `build` via `just` before running this, as this service
  # can handle deployments for multiple Docker-compatible operating
  # systems and architectures whereas `build` on its own only builds
  # binaries for `linux/arm64`.
  deploy-to-ghcr:
    image: docker:27.4.1-cli-alpine3.21
    volumes:
      - $PWD/Dockerfile:/work/Dockerfile
      - $PWD/out:/work/out
      - $PWD/include:/work/include
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /work
    environment:
      - GITHUB_REPOSITORY
      - GITHUB_TOKEN
      - PROJECT_NAME
      - ARCHITECTURES_CSV
      - BUILD_TAGS
    entrypoint: [ "sh" ]
    command:
      - -c
      - |
        set -eo pipefail
        docker buildx ls | grep -q "${PROJECT_NAME}-builder" ||
          docker buildx create --driver docker-container \
            --name "${PROJECT_NAME}-builder" &>/dev/null
        docker login ghcr.io -u "$(echo "$GITHUB_REPOSITORY" | cut -f1 -d '/')" -p "$GITHUB_TOKEN"
        >&2 echo "INFO: Building $PROJECT_NAME for archs: $ARCHITECTURES_CSV"
        for tag in $(echo "$BUILD_TAGS" | tr ',' ' ')
        do
          this_tag="ghcr.io/$GITHUB_REPOSITORY:$$tag"
          docker buildx build --builder "${PROJECT_NAME}-builder" \
            -t "$$this_tag" \
            --build-arg PROJECT_NAME="$PROJECT_NAME" \
            --platform "$ARCHITECTURES_CSV" \
            --output registry \
            --push \
            .
        done
  # Retrieves timezone data from timezonedb.com.
  #
  # NOTE: This is a hard dependency that was written when I first
  # wrote Flight Summarizer. This service will likely move
  # into a Go helper app sometime in the future.
  retrieve_timezones:
    image: curlimages/curl:8.11.1
    entrypoint: sh
    user: root
    network_mode: service:tailscale
    environment:
      - REFRESH_TZ
    volumes:
      - tzdb-vol:/data
      - $PWD/include/retrieve_tz.sh:/script.sh
    command:
      - /script.sh
  _remove_buildx_builder:
    image: docker:27.4.1-cli-alpine3.21
    volumes:
      - $PWD/Dockerfile:/work/Dockerfile
      - $PWD/out:/work/out
      - $PWD/include:/work/include
      - /var/run/docker.sock:/var/run/docker.sock
    working_dir: /work
    environment:
      - PROJECT_NAME
    entrypoint: [ "docker" ]
    command:
      - buildx
      - rm
      - "${PROJECT_NAME}-builder"
  # Starts a Tailscale proxy (so that e2e and timezone retrieval services
  # can run within GitHub Actions containers)
  tailscale:
    image: tailscale/tailscale:v1.78.3
    environment:
      - TS_AUTHKEY
      - TS_EXTRA_ARGS
      - TS_STATE_DIR=/data/tailscale
      - TS_USERSPACE=false
    volumes:
      - tsdata-vol:/data
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
  sops:
    build:
      dockerfile: sops.Dockerfile
      context: .
    volumes:
      - gpgdata-vol:/root/.gnupg
      - $PWD/config.yaml:/work/config.yaml
    working_dir: /work
    environment:
      - EDITOR=dont-use-this-to-edit
      - GPG_PRIVATE_KEY_B64
      - GPG_PASSPHRASE
    entrypoint:
      - sh
      - -c
      - |
        set -eo pipefail
        chmod 600 /root/.gnupg
        gpg-connect-agent --quiet reloadagent /bye &>/dev/null
        echo "$GPG_PRIVATE_KEY_B64" | base64 -d > /tmp/key.asc
        echo "$GPG_PASSPHRASE" | gpg --batch --import /tmp/key.asc &>/dev/null
        fpr=$(gpg --list-keys | grep -A 1 pub | tail -1 | tr -d ' ')
        touch /tmp/foo.txt
        gpg --batch --yes --passphrase "$GPG_PASSPHRASE" --pinentry-mode=loopback -s /tmp/foo.txt
        sops "$@"
